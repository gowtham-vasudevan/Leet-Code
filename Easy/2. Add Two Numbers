/* Intuition: 
      Since the numbers are stored in reverse order in a linked list, this makes the job easier for us as we just jave to traverse through both the linked lists
      only once and add the digits and store them in either one of the given linked lists or create a new ListNode* for every digit and return the head ListNode 
      of the sum.
      
      In this Implementation, I have created a new ListNode for every digit of the sum value and returned the head of the list. 

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
ListNode* head = nullptr;
ListNode* prev = head;
int carry = 0;
public:
    void findNode(ListNode* l1, ListNode* l2){
        if(!l1 && !l2) return;
        else if(l1 && l2){
            ListNode* tmp = new ListNode;
            tmp->val = (l1->val + l2->val + carry)%10;
            tmp->next = nullptr;
            carry = (l1->val + l2->val + carry)/10;
            if(!head){
                head = tmp;
                prev = head;
            }
            else{
                prev->next = tmp;
                prev = prev->next;
            }
            findNode(l1->next, l2->next); //Recursively calling both the linked list
        }
        else if(!l1){
            ListNode* tmp = new ListNode;
            tmp->val = (l2->val + carry)%10;
            tmp->next = nullptr;
            carry = (l2->val + carry)/10;
            prev->next = tmp;
            prev = prev->next;
            findNode(l1, l2->next);
        }
        else if(!l2){
            ListNode* tmp = new ListNode;
            tmp->val = (l1->val + carry)%10;
            tmp->next = nullptr;
            carry = (l1->val + carry)/10;
            prev->next = tmp;
            prev = prev->next;
            findNode(l1->next, l2);
        }
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){
        if(!l1 && !l2) return nullptr;
        if(!l1) return l2;
        if(!l2) return l1;
        findNode(l1, l2);
        if(carry){
            ListNode* tmp = new ListNode;
            tmp->val = carry;
            tmp->next = nullptr;
            prev->next = tmp;
        }
        return head;
    }
};
